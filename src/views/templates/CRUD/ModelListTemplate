<template>
  <!-- TODO
    1. Rename 'CHANGE_MODEL_NAME' to yourModel (used in app.json models language configuration [src/locale])
    2. Rename 'CHANGE_MODEL_TYPE' to YourModel (a TypeScript class or interface [src/app/models])
    3. Rename 'CHANGE_SERVICE_NAME' to yourModels (your http client for this model [src/services])
    4. Configure 'private columns: ColumnType' to show on list
    5. If you get error on this.services or this.loading, fix relative paths of '/app/models/ColumnType' and 'components/shared/BaseComponent.vue'
        Example -> '../../../components...' instead of '@/components...'

    Example:
        MODEL_NAME -> transaction
        TYPE -> Expense
        SERVICE_NAME -> transactions
  -->
  <div>
    <page-title>
      <template v-slot:title>{{ $t("models.CHANGE_MODEL_NAME.plural") }}</template>
      <template v-slot:buttons>
        <span class="hidden sm:block ml-3 shadow-sm rounded-sm">
          <button
            @click="reload"
            type="button"
            class="h-8 inline-flex items-center px-4 py-2 border border-gray-300 text-xs leading-5 font-medium rounded-sm text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:text-theme-900 active:bg-gray-50 active:text-theme-900 transition duration-150 ease-in-out"
          >
            <i class="fa fa-redo -ml-1 mr-2 h-5 w-5 text-gray-500"></i>
            {{ $t("shared.reload") }}
          </button>
        </span>
        <span class="sm:ml-3 shadow-sm rounded-sm">
          <button
            @click="adding = true"
            class="h-8 inline-flex items-center px-4 py-2 border border-theme-200 text-xs leading-5 font-medium rounded-sm text-theme-700 bg-theme-100 hover:bg-theme-200 focus:outline-none focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700 transition duration-150 ease-in-out"
          >
            <i class="fa fa-plus -ml-1 mr-2 h-5 w-5 text-theme-700"></i>
            {{ $t("shared.new") }}
          </button>
        </span>
      </template>
    </page-title>
    <div class="mt-4 sm:mt-12">
      <div v-if="loading">
        <table-row-skeleton></table-row-skeleton>
        <table-row-skeleton></table-row-skeleton>
        <table-row-skeleton></table-row-skeleton>
      </div>
      <div v-else>
        <entity-table-list
          :modelName="modelName"
          :parentRoute="$route.path"
          :columns="columns"
          :items="items"
          :allowEdit="true"
          v-on:edit="edit"
        ></entity-table-list>
      </div>
      <entity-form
        v-if="selected != null"
        v-on:added="added"
        v-on:saved="saved"
        v-on:deleted="deleted"
        v-on:canceled="canceled"
        :modelName="modelName"
        :object="selected"
        :columns="columns"
      ></entity-form>
      <entity-form
        v-if="adding"
        :modelName="modelName"
        :columns="columns"
        v-on:added="added"
        v-on:saved="saved"
        v-on:deleted="deleted"
        v-on:canceled="canceled"
      ></entity-form>
    </div>
    <error-modal ref="error-modal"></error-modal>
  </div>
</template>

<script lang="ts">
import Component from "vue-class-component";
import BaseComponent from "../../../../components/shared/BaseComponent.vue";
import { ColumnType, ValueType } from "../../../../app/models/ColumnType";
import PageTitle from "@/components/shared/navigation/PageTitle.vue";
import EntityTableList from "@/components/shared/entities/EntityTableList.vue";
import EntityForm from "@/components/shared/entities/EntityForm.vue";

@Component({ components: { PageTitle, EntityTableList, EntityForm } })
export default class CHANGE_MODEL_TYPEListComponent extends BaseComponent {
  private modelName: string = "CHANGE_MODEL_NAME";
  private columns: ColumnType[] = [
    // { name: "property1" },
    // { name: "property2", valueType: ValueType.Number },
  ];
  private selected = null as any | null;
  private adding: boolean = false;
  private items: any = [];
  mounted() {
    this.items = [];
    this.reload();
  }
  reload() {
    this.loading = true;
    this.services.CHANGE_SERVICE_NAME.get()
      .then((response: any) => {
        this.items = response.data;
      }) .catch((error) => {
        // @ts-ignore
        this.$refs["error-modal"].show(error);
      })
      .finally(() => {
        this.loading = false;
      });
  }
  closeForm(hasChanges = false) {
    this.selected = null;
    this.adding = false;
    if (hasChanges) {
      // @ts-ignore
      this.$parent.hasChanges = true;
    }
  }
  edit(item: any) {
    this.selected = item;
  }
  added(data: any) {
    console.log("added");
    this.services.CHANGE_SERVICE_NAME.post(data).then((response) => {
      // @ts-ignore
      this.items.push(response.data);
      this.selected = null;
      this.closeForm(true);
    }) .catch((error) => {
        // @ts-ignore
        this.$refs["error-modal"].show(error);
      });
  }
  saved(data: any) {
    console.log("saved");
    this.services.CHANGE_SERVICE_NAME.put(data.id, data).then((response) => {
      // @ts-ignore
      const idx = this.items.findIndex((f) => f.id === data.id);
      this.items[idx] = data;
      this.closeForm(true);
    }) .catch((error) => {
        // @ts-ignore
        this.$refs["error-modal"].show(error);
      });
  }
  deleted(data: any) {
    console.log("deleted");
    this.services.CHANGE_SERVICE_NAME.delete(data.id).then((response) => {
      // @ts-ignore
      this.items = this.items.filter((f) => f.id !== data.id);
      this.closeForm(true);
    }) .catch((error) => {
        // @ts-ignore
        this.$refs["error-modal"].show(error);
      });
  }
  canceled() {
    console.log("canceled");
    this.closeForm();
  }
}
</script>
